// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model "Sharykhin/buffstream-questionnaire/domains/question/repository/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// QuestionRepository is an autogenerated mock type for the QuestionRepository type
type QuestionRepository struct {
	mock.Mock
}

// FindListByStreamID provides a mock function with given fields: ctx, UUID
func (_m *QuestionRepository) FindListByStreamID(ctx context.Context, UUID string) ([]model.Question, error) {
	ret := _m.Called(ctx, UUID)

	var r0 []model.Question
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Question); ok {
		r0 = rf(ctx, UUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, UUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindListByStreamIDs provides a mock function with given fields: ctx, UUIDs
func (_m *QuestionRepository) FindListByStreamIDs(ctx context.Context, UUIDs []string) ([]model.Stream, error) {
	ret := _m.Called(ctx, UUIDs)

	var r0 []model.Stream
	if rf, ok := ret.Get(0).(func(context.Context, []string) []model.Stream); ok {
		r0 = rf(ctx, UUIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Stream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, UUIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneByIDWithAnswers provides a mock function with given fields: ctx, UUID
func (_m *QuestionRepository) FindOneByIDWithAnswers(ctx context.Context, UUID string) (*model.Question, error) {
	ret := _m.Called(ctx, UUID)

	var r0 *model.Question
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Question); ok {
		r0 = rf(ctx, UUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Question)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, UUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
